{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { addUser, getUser } from \"../../service\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from \"../../state/actions/authentication\";\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    const userProfile = {\n      ...newUser,\n      password: undefined,\n      confirm_password: undefined\n    };\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          addUser(userProfile);\n          dispatch(handleLogin(userProfile));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n  async function handleUserLogout() {\n    var _app$currentUser;\n    console.dir(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => {\n      dispatch(handleLogout());\n      console.log(\"user successfully log out\");\n    }).catch(err => console.log(err));\n  }\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        // verify current user\n        const currentUser = await app.currentUser;\n        // retrieve user profile\n        getUser(currentUser).then(userProfile => {\n          console.log(userProfile);\n          dispatch(handleLogin(userProfile));\n          resolve(userProfile);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    return new Promise(resolve => {\n      getUser(currentUser).then(userProfile => {\n        resolve(userProfile);\n        dispatch(handleLogin(userProfile));\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication\n  };\n};\nexport default useAuthentication;","map":{"version":3,"names":["Realm","addUser","getUser","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","userProfile","password","undefined","confirm_password","Promise","resolve","emailPasswordAuth","registerUser","email","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","_app$currentUser","console","dir","currentUser","logOut","log","handleUserLogin","handleAuthentication"],"sources":["F:/PROFET ECOMMERCE/final/final/marketplace/client/src/lib/hooks/useAuthentication/index.js"],"sourcesContent":["import * as Realm from \"realm-web\";\nimport { addUser, getUser } from \"../../service\";\nimport { app } from \"../../service/mongoDB-sdk\";\nimport {\n  handleLogin,\n  handleLogout,\n  handleAuthenticationErrors,\n} from \"../../state/actions/authentication\";\n\nconst useAuthentication = (dispatch) => {\n  function handleUserRegistration(newUser) {\n    const userProfile = {\n      ...newUser,\n      password: undefined,\n      confirm_password: undefined,\n    };\n    return new Promise((resolve) => {\n      app.emailPasswordAuth\n        .registerUser(newUser.email, newUser.password)\n        .then(() => {\n          const credentials = Realm.Credentials.emailPassword(\n            newUser.email,\n            newUser.password\n          );\n          app.logIn(credentials).then((user) => {\n            addUser(userProfile);\n            dispatch(handleLogin(userProfile));\n            resolve(user);\n          });\n        })\n        .catch((err) => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n  async function handleUserLogout() {\n    console.dir(app.currentUser);\n    app.currentUser\n      ?.logOut()\n      .then(() => {\n        dispatch(handleLogout());\n        console.log(\"user successfully log out\");\n      })\n      .catch((err) => console.log(err));\n  }\n  async function handleUserLogin(email, password) {\n    return new Promise((resolve) => {\n      app\n        .logIn(Realm.Credentials.emailPassword(email, password))\n        .then(async () => {\n          // verify current user\n          const currentUser = await app.currentUser;\n          // retrieve user profile\n          getUser(currentUser).then((userProfile) => {\n            console.log(userProfile)\n            dispatch(handleLogin(userProfile));\n            resolve(userProfile);\n          });\n        })\n        .catch((err) => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    return new Promise(resolve => {\n      getUser(currentUser)\n      .then((userProfile) => {\n        resolve(userProfile)\n        dispatch(handleLogin(userProfile))\n      })\n      .catch((err) => dispatch(handleAuthenticationErrors(err)));\n    })\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication,\n  };\n};\nexport default useAuthentication;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}